<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="Junit-Lab" default="default" basedir=".">
    <description>Builds, tests, and runs the project Junit-Lab.</description>
    <import file="nbproject/build-impl.xml"/>
    
	<property file="build.properties"/>

	
	<!-- The clean target deletes the bin and dist directories (permitting 
 	you to start from scratch. --> 

	<target name="clean">
	  <delete dir="${binDirectory}"/>
	  <delete dir="${distDirectory}"/>
	</target>



	<!-- The compile-all target creates the bin directory, copies any 
	.properties files from the src directory into the bin directory, 
	and compiles the code in the src directory while simultaneously
	placing the generated .class files into he bin directory. -->

	<target name="compile-all" depends="clean">
	  <mkdir dir="${binDirectory}"/>
	  <copy todir="${binDirectory}">
	    <fileset dir="${srcDirectory}" includes="**/*.properties"/>
	  </copy>
	  <javac srcdir="${srcDirectory}"
		 destdir="${binDirectory}"
		 includeAntRuntime="false"
		 fork="true"
	  />		
	</target>



	<!-- The build-all target creates the dist directory and jars 
	the files in the bin directory, placing the resulting .jar file 
	in the dist directory. -->

	<target name="build-all" depends="compile-all"> 
	  <mkdir dir="${distDirectory}"/>
	  <jar destfile="${distDirectory}/${appName}.jar"
	       basedir="${binDirectory}">
	       <manifest>
		 <attribute name="Main-Class"
		   value="${mainClass}"/>
	       </manifest>
	  </jar>
	</target>



	<!-- The run-all target runs the .jar file created in the 
	previous target, utilizing the class as the executable class. -->

	<target name="run-all" depends="build-all">
	  <java jar="${distDirectory}/${appName}.jar"
		fork="true"
	    >
	  </java>
	</target>


	<!-- The doc target has no dependencies, creates the javadocs 
	and places them in the doc directory. -->

	<target name="doc">
	<javadoc sourcepath="${srcDirectory}"
		 destdir="${docDirectory}"
		 author="true"
		 version="true">
	</javadoc>
	</target>


</project>
